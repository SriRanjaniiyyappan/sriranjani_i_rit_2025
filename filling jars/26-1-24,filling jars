#Animesh has  empty candy jars, numbered from  to , with infinite capacity. He performs  operations. Each operation is described by  integers, , , and . Here,  and  are indices of the jars, and  is the number of candies to be added inside each jar whose index lies between  and  (both inclusive). Can you tell the average number of candies after  operations?

#Example



#The array has  elements that all start at . In the first operation, add  to the first  elements. Now the array is . In the second operation, add  to the last  elements (3 - 5). Now the array is  and the average is 10. Sincd 10 is already an integer value, it does not need to be rounded.

#Function Description

#Complete the solve function in the editor below.

#solve has the following parameters:

#int n: the number of candy jars
#int operations[m][3]: a 2-dimensional array of operations
#Returns

#int: the floor of the average number of canidies in all jars
#Input Format

#The first line contains two integers,  and , separated by a single space.
 #lines follow. Each of them contains three integers, , , and , separated by spaces.

#Constraints





#Sample Input

#STDIN       Function
-----       --------
5 3         n = 5, operations[] size = 3
1 2 100     operations = [[1, 2, 100], [2, 5, 100], [3, 4, 100]]
2 5 100
3 4 100
#Sample Output

#160

ANSWER:
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define size 50
int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    long n,m,a,b,k,*arr,i=0,sum=0;
    char *buff=NULL;

    buff=malloc(50);
    if(fgets(buff,size,stdin)!=NULL)
    {
        if(strlen(buff)>0 && buff[strlen(buff)-1]=='\n')
            buff[strlen(buff)-1]='\0';
        sscanf(buff,"%ld %ld",&n,&m);

    }
    else
        exit(0);

    arr=malloc(sizeof(long)*n+1);

    for(i=0;i<n;i++)
        arr[i]=0;

    i=0;    
    while(i++<m)
    {
        if(fgets(buff,size,stdin)!=NULL)
        {
            if(strlen(buff)>0 && buff[strlen(buff)-1]=='\n')
                buff[strlen(buff)-1]='\0';
            sscanf(buff,"%ld %ld %ld",&a,&b,&k);

            while(a<=b)
            {
                arr[a-1]+=k;
                a++;
            }

        }
        else
            exit(0);      

    }
    for(i=0;i<n;i++)
        sum+=arr[i];

    printf("%ld",sum/n);

    return 0;
}
